// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Metamask ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
async function connectWallet() {
  if (!window.ethereum) {
    alert("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Metamask!");
    return;
  }

  try {
    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
    document.getElementById("wallet-status").textContent = `üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: ${accounts[0]}`;
    
    await checkNetwork();
    await getBalance(accounts[0]);
    await getTokenBalance(accounts[0]);

    return accounts[0];
  } catch (error) {
    console.error("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function checkNetwork() {
  const chainId = await ethereum.request({ method: "eth_chainId" });

  if (chainId !== "0x1") { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Ethereum Mainnet
    alert("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Ethereum Mainnet!");
  }
}

// ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ETH
async function getBalance(address) {
  try {
    const web3 = new Web3(window.ethereum);
    const balance = await web3.eth.getBalance(address);
    const ethBalance = web3.utils.fromWei(balance, "ether");
    document.getElementById("wallet-balance").textContent = `üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${ethBalance} ETH`;
  } catch (error) {
    console.error("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:", error);
  }
}

// ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ Token (USDT ‡∏´‡∏£‡∏∑‡∏≠ MATIC)
async function getTokenBalance(address) {
  try {
    const tokenAddress = "0xYourTokenAddress"; // ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á Token
    const tokenABI = [ /* ‡πÉ‡∏™‡πà ABI ‡∏Ç‡∏≠‡∏á Token ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */ ];
    const tokenContract = new web3.eth.Contract(tokenABI, tokenAddress);
    
    const balance = await tokenContract.methods.balanceOf(address).call();
    const formattedBalance = web3.utils.fromWei(balance, "ether");

    document.getElementById("token-balance").textContent = `ü™ô Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${formattedBalance}`;
  } catch (error) {
    console.error("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î Token:", error);
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Smart Contract
const contractAddress = "0xYourContractAddress"; // ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á Smart Contract
const contractABI = [ /* ‡πÉ‡∏™‡πà ABI ‡∏Ç‡∏≠‡∏á Smart Contract ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */ ];
const web3 = new Web3(window.ethereum);
const nftContract = new web3.eth.Contract(contractABI, contractAddress);

// ‡∏°‡∏¥‡πâ‡∏ô NFT ‡∏ú‡πà‡∏≤‡∏ô Smart Contract
async function mintNFT() {
  try {
    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
    await nftContract.methods.mint().send({ from: accounts[0] });
    alert("üéâ ‡∏°‡∏¥‡πâ‡∏ô NFT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  } catch (error) {
    console.error("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏¥‡πâ‡∏ô NFT:", error);
  }
}

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
document.getElementById("connect-btn").addEventListener("click", connectWallet);
document.getElementById("fuse-btn").addEventListener("click", mintNFT);
